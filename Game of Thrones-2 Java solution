import java.io.*;
import java.math.BigInteger;

public class Solution {

    static final long mod = 1000000007;

    public static void solve(Input in, PrintWriter out) throws IOException {
        String s = in.next();
        int[] counts = new int[26];
        for (char c : s.toCharArray()) {
            counts[c - 'a']++;
        }
        int odd = 0;
        long ans = 1;
        int total = 0;
        for (int count : counts) {
            if (count % 2 == 1) {
                odd++;
            }
            ans = (ans * c(total + count / 2, count / 2)) % mod;
            total += count / 2;
        }
        out.println(odd <= 1 ? ans : 0);
    }

    private static long c(int n, int k) {
        long nom = 1, denom = 1;
        for (int i = 0; i < k; ++i) {
            nom = (nom * (n - i)) % mod;
            denom = (denom * (i + 1)) % mod;
        }
        return (nom * BigInteger.valueOf(denom).modInverse(BigInteger.valueOf(mod)).longValue()) % mod;
    }

    public static void main(String[] args) throws IOException {
        PrintWriter out = new PrintWriter(System.out);
        solve(new Input(new BufferedReader(new InputStreamReader(System.in))), out);
        out.close();
    }

    static class Input {
        BufferedReader in;
        StringBuilder sb = new StringBuilder();

        public Input(BufferedReader in) {
            this.in = in;
        }

        public Input(String s) {
            this.in = new BufferedReader(new StringReader(s));
        }

        public String next() throws IOException {
            sb.setLength(0);
            while (true) {
                int c = in.read();
                if (c == -1) {
                    return null;
                }
                if (" \n\r\t".indexOf(c) == -1) {
                    sb.append((char)c);
                    break;
                }
            }
            while (true) {
                int c = in.read();
                if (c == -1 || " \n\r\t".indexOf(c) != -1) {
                    break;
                }
                sb.append((char)c);
            }
            return sb.toString();
        }

        public int nextInt() throws IOException {
            return Integer.parseInt(next());
        }

        public long nextLong() throws IOException {
            return Long.parseLong(next());
        }

        public double nextDouble() throws IOException {
            return Double.parseDouble(next());
        }
    }
}
